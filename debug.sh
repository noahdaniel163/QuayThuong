#!/bin/bash

# Script ti·ªán √≠ch cho debug v√† qu·∫£n l√Ω Docker containers
# S·ª≠ d·ª•ng: ./debug.sh [command]

PROJECT_DIR="/home/nodeapp/quaythuong"
cd $PROJECT_DIR

case "$1" in
    "status"|"s")
        echo "üîç Ki·ªÉm tra tr·∫°ng th√°i containers..."
        docker-compose ps
        ;;
    
    "logs"|"l")
        echo "üìã Xem logs ·ª©ng d·ª•ng (Ctrl+C ƒë·ªÉ tho√°t)..."
        docker-compose logs -f app
        ;;
    
    "logs-db")
        echo "üìã Xem logs database (Ctrl+C ƒë·ªÉ tho√°t)..."
        docker-compose logs -f mysql
        ;;
    
    "logs-all")
        echo "üìã Xem t·∫•t c·∫£ logs (Ctrl+C ƒë·ªÉ tho√°t)..."
        docker-compose logs -f
        ;;
    
    "rebuild"|"r")
        echo "üî® Rebuild v√† restart ·ª©ng d·ª•ng..."
        docker-compose down
        docker-compose up -d --build
        echo "‚úÖ Ho√†n th√†nh! Ki·ªÉm tra logs:"
        docker-compose logs -f app
        ;;
    
    "restart")
        echo "üîÑ Restart ·ª©ng d·ª•ng..."
        docker-compose restart app
        echo "‚úÖ Ho√†n th√†nh! Ki·ªÉm tra logs:"
        docker-compose logs -f app
        ;;
    
    "shell"|"sh")
        echo "üêö Truy c·∫≠p shell container app..."
        docker-compose exec app sh
        ;;
    
    "mysql"|"db")
        echo "üóÑÔ∏è Truy c·∫≠p MySQL..."
        docker-compose exec mysql mysql -u root -ppassword quay_thuong
        ;;
    
    "backup")
        echo "üíæ Backup database..."
        BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
        docker-compose exec mysql mysqldump -u root -ppassword quay_thuong > $BACKUP_FILE
        echo "‚úÖ Backup t·∫°o th√†nh c√¥ng: $BACKUP_FILE"
        ;;
    
    "clean")
        echo "üßπ D·ªçn d·∫πp Docker..."
        docker system prune -f
        echo "‚úÖ D·ªçn d·∫πp ho√†n th√†nh!"
        ;;
    
    "stop")
        echo "‚èπÔ∏è D·ª´ng t·∫•t c·∫£ containers..."
        docker-compose down
        echo "‚úÖ ƒê√£ d·ª´ng t·∫•t c·∫£ containers!"
        ;;
    
    "start")
        echo "‚ñ∂Ô∏è Kh·ªüi ƒë·ªông containers..."
        docker-compose up -d
        echo "‚úÖ Containers ƒë√£ kh·ªüi ƒë·ªông!"
        ;;
    
    "test")
        echo "üß™ Test k·∫øt n·ªëi ·ª©ng d·ª•ng..."
        echo "Ki·ªÉm tra port 3000..."
        if curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "‚úÖ ·ª®ng d·ª•ng ƒëang ch·∫°y t·ªët!"
        else
            echo "‚ùå ·ª®ng d·ª•ng kh√¥ng ph·∫£n h·ªìi!"
        fi
        ;;
    
    "stats")
        echo "üìä Th·ªëng k√™ resource usage..."
        docker stats --no-stream
        ;;
    
    "help"|"h"|"")
        echo "üöÄ Script Debug cho Quay Th∆∞·ªüng App"
        echo ""
        echo "C√°ch s·ª≠ d·ª•ng: ./debug.sh [command]"
        echo ""
        echo "Commands c√≥ s·∫µn:"
        echo "  status, s      - Ki·ªÉm tra tr·∫°ng th√°i containers"
        echo "  logs, l        - Xem logs ·ª©ng d·ª•ng"
        echo "  logs-db        - Xem logs database"
        echo "  logs-all       - Xem t·∫•t c·∫£ logs"
        echo "  rebuild, r     - Rebuild v√† restart ·ª©ng d·ª•ng"
        echo "  restart        - Restart ·ª©ng d·ª•ng"
        echo "  shell, sh      - Truy c·∫≠p shell container"
        echo "  mysql, db      - Truy c·∫≠p MySQL"
        echo "  backup         - Backup database"
        echo "  clean          - D·ªçn d·∫πp Docker"
        echo "  stop           - D·ª´ng containers"
        echo "  start          - Kh·ªüi ƒë·ªông containers"
        echo "  test           - Test k·∫øt n·ªëi ·ª©ng d·ª•ng"
        echo "  stats          - Xem resource usage"
        echo "  help, h        - Hi·ªÉn th·ªã help n√†y"
        echo ""
        echo "V√≠ d·ª•:"
        echo "  ./debug.sh rebuild    # Rebuild khi c√≥ thay ƒë·ªïi code"
        echo "  ./debug.sh logs       # Xem logs real-time"
        echo "  ./debug.sh test       # Ki·ªÉm tra app c√≥ ch·∫°y kh√¥ng"
        ;;
    
    *)
        echo "‚ùå Command kh√¥ng h·ª£p l·ªá: $1"
        echo "S·ª≠ d·ª•ng './debug.sh help' ƒë·ªÉ xem danh s√°ch commands"
        exit 1
        ;;
esac